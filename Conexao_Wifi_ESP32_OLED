#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WebServer.h>

// Configuração do OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Credenciais padrão da rede Wi-Fi
const char* defaultSSID = "2CPM_ROBOTICA";
const char* defaultPassword = "#@robotica1";

// Credenciais do Access Point
const char* apSSID = "Fechadura2CPM";   // Nome do AP
const char* apPassword = "cholas123";  // Senha do AP

// Configuração do servidor
WebServer server(80);
bool useAPMode = false;

void setup() {
    Serial.begin(115200);
    Wire.begin(4, 5); // Configurar pinos I2C para OLED

    // Inicializar OLED
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("Erro ao inicializar OLED!");
        while (true);
    }

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 10);
    display.println("Conectando ao Wi-Fi...");
    display.display();

    // Tentar conectar à rede padrão
    WiFi.begin(defaultSSID, defaultPassword);
    Serial.print("Conectando à rede padrão");

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 15) {
        delay(1000);
        Serial.print(".");
        display.clearDisplay();
        display.setCursor(0, 10);
        display.println("Tentando conectar...");
        display.display();
        attempts++;
    }

    // Se falhar, ativar modo AP com credenciais definidas via variáveis
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("\nFalha na conexão! Iniciando Access Point...");
        useAPMode = true;
        WiFi.softAP(apSSID, apPassword);

        IPAddress apIP = WiFi.softAPIP();
        Serial.print("AP ativo. IP: ");
        Serial.println(apIP);

        display.clearDisplay();
        display.setCursor(0, 10);
        display.println("Modo AP ativo!");
        display.setCursor(0, 30);
        display.print("IP: ");
        display.println(apIP);
        display.display();
    } else {
        Serial.println("\nConectado!");
        Serial.print("IP: ");
        Serial.println(WiFi.localIP());

        display.clearDisplay();
        display.setCursor(0, 10);
        display.println("Wi-Fi conectado!");
        display.setCursor(0, 30);
        display.print("IP: ");
        display.println(WiFi.localIP());
        display.display();
    }

    // Página HTML para configurar novas credenciais Wi-Fi
    server.on("/", []() {
        server.send(200, "text/html",
        "<form action='/config' method='POST'>\
            SSID: <input type='text' name='ssid'><br>\
            Senha: <input type='password' name='password'><br>\
            <input type='submit' value='Salvar'>\
        </form>");
    });

    // Configurar novas credenciais e reiniciar ESP32
    server.on("/config", []() {
        if (server.hasArg("ssid") && server.hasArg("password")) {
            String newSSID = server.arg("ssid");
            String newPass = server.arg("password");

            WiFi.begin(newSSID.c_str(), newPass.c_str());
            server.send(200, "text/plain", "Credenciais atualizadas! Reinicie o ESP32.");
        } else {
            server.send(400, "text/plain", "Parâmetros ausentes.");
        }
    });

    server.begin();
}

void loop() {
    server.handleClient();  // WebServer precisa desse comando no loop

    if (!useAPMode && WiFi.status() != WL_CONNECTED) {
        display.clearDisplay();
        display.setCursor(0, 10);
        display.println("Reconectando...");
        display.display();

        WiFi.begin(defaultSSID, defaultPassword);
        delay(5000);
    }
}
