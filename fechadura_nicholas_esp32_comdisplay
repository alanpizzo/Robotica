#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_PN532.h>
#include <ArduinoOTA.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define OLED_SDA 4
#define OLED_SCL 5
#define LOCK_PIN 25

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Adafruit_PN532 nfc(OLED_SDA, OLED_SCL);
WiFiClient espClient;
PubSubClient client(espClient);

const char *ssid = "2CPM_ROBOTICA";
const char *password = "#@robotica1";
const char *mqtt_server = "broker.hivemq.com";

const String validTags[] = {"23 9A A5 C5", "E7 31 77 53", "D3 F1 8F F5"};

// Vari√°veis de estado
unsigned long lastTagRead = 0;
bool waitingResponse = false;
unsigned long lockStartTime = 0;
bool isLockActive = false;

void setup() {
  Serial.begin(115200);
  
  setupPins();
  setupI2CDevices();
  connectWiFi();
  connectMQTT();
  setupOTA();

  displayInitialScreen();
}

void loop() {
  client.loop();
  ArduinoOTA.handle();

  if(isLockActive) {
    handleLockState();
  } else {
    if(!waitingResponse) checkRFID();
  }
}

void setupPins() {
  pinMode(LOCK_PIN, OUTPUT);
  digitalWrite(LOCK_PIN, LOW);
}

void setupI2CDevices() {
  Wire.begin(OLED_SDA, OLED_SCL);
  Wire.setClock(100000);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("Erro no OLED!");
    while(1);
  }

  if(!nfc.begin()) {
    Serial.println("Erro no PN532!");
    while(1);
  }
  nfc.SAMConfig();
}

void handleLockState() {
  static unsigned long lastUpdate = 0;
  unsigned long currentTime = millis();
  unsigned int elapsed = (currentTime - lockStartTime) / 1000;
  unsigned int remaining = 30 - elapsed;

  if(remaining <= 0) {
    digitalWrite(LOCK_PIN, LOW);
    isLockActive = false;
    displayInitialScreen();
    return;
  }

  if(currentTime - lastUpdate >= 1000) {
    displayLockScreen(remaining);
    lastUpdate = currentTime;
  }
}

void displayInitialScreen() {
  display.clearDisplay();
  displayHeader();
  display.setTextSize(1);
  display.setCursor(0, 15);
  display.println("Aproxime a TAG");
  display.display();
}

void displayHeader() {
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("CPM Security");
  display.drawFastHLine(0, 10, SCREEN_WIDTH, SSD1306_WHITE);
}

void displayLockScreen(int remaining) {
  display.clearDisplay();
  displayHeader();
  
  // Mensagem principal
  display.setTextSize(1);
  display.setCursor(0, 15);
  display.println("Acesso Liberado");

  // Contagem regressiva centralizada
  display.setTextSize(2);
  String countdown = String(remaining);
  int x = (SCREEN_WIDTH - (countdown.length() * 12)) / 2; // 12px por caractere no size 2
  display.setCursor(x, 30);
  display.println(countdown);

  display.display();
}

void checkRFID() {
  if(millis() - lastTagRead < 1000) return;
  
  uint8_t uid[7];
  uint8_t uidLength;
  
  if(nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength, 100)) {
    String tagID = convertUidToString(uid, uidLength);
    processTag(tagID);
    lastTagRead = millis();
  }
}

String convertUidToString(uint8_t *uid, uint8_t length) {
  String tagID = "";
  for(uint8_t i=0; i<length; i++) {
    if(uid[i] < 0x10) tagID += "0";
    tagID += String(uid[i], HEX);
    if(i < length-1) tagID += " ";
  }
  tagID.toUpperCase();
  return tagID;
}

void processTag(String tagID) {
  bool authorized = false;
  for(const String &validTag : validTags) {
    if(tagID.equalsIgnoreCase(validTag)) {
      authorized = true;
      break;
    }
  }

  if(authorized) {
    client.publish("trava/solicitacao", "solicitacao");
    waitingResponse = true;
    display.clearDisplay();
    displayHeader();
    display.setCursor(0, 15);
    display.println("Autorizado\nAguarde...");
    display.display();
  } else {
    display.clearDisplay();
    displayHeader();
    display.setCursor(0, 15);
    display.println("Tag invalida!");
    display.display();
    delay(2000);
    displayInitialScreen();
  }
}

void connectWiFi() {
  display.clearDisplay();
  displayHeader();
  display.setCursor(0, 15);
  display.println("Conectando WiFi...");
  display.display();
  
  WiFi.begin(ssid, password);
  
  unsigned long start = millis();
  while(WiFi.status() != WL_CONNECTED && millis() - start < 15000) {
    delay(500);
    Serial.print(".");
  }
  
  if(WiFi.status() == WL_CONNECTED) {
    displayInitialScreen();
  } else {
    display.clearDisplay();
    displayHeader();
    display.setCursor(0, 15);
    display.println("Falha WiFi!");
    display.display();
    delay(2000);
    ESP.restart();
  }
}

void connectMQTT() {
  client.setServer(mqtt_server, 1883);
  client.setCallback(mqttCallback);
  
  while(!client.connected()) {
    if(client.connect("ESP32_SmartLock")) {
      client.subscribe("trava/liberacao");
      break;
    }
    delay(5000);
  }
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String message;
  for(unsigned int i=0; i<length; i++) {
    message += (char)payload[i];
  }

  if(String(topic) == "trava/liberacao") {
    waitingResponse = false;
    
    if(message == "liberar") {
      digitalWrite(LOCK_PIN, HIGH);
      lockStartTime = millis();
      isLockActive = true;
      displayLockScreen(30);
    }
    else {
      display.clearDisplay();
      displayHeader();
      display.setCursor(0, 15);
      display.println("Acesso Negado!");
      display.display();
      delay(2000);
      displayInitialScreen();
    }
  }
}

void setupOTA() {
  ArduinoOTA
    .onStart([]() {
      display.clearDisplay();
      displayHeader();
      display.setCursor(0, 15);
      display.println("Atualizando...");
      display.display();
    })
    .onEnd([]() {
      display.clearDisplay();
      displayHeader();
      display.setCursor(0, 15);
      display.println("Atualizacao OK!");
      display.display();
      delay(2000);
    });

  ArduinoOTA.begin();
}
