#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Definindo as credenciais da rede WiFi
const char* ssid = "2CPM_ROBOTICA";
const char* password = "#@robotica1";

// Definindo as configurações do MQTT
const char* mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;

// Definindo os tópicos MQTT
const char* temp_topic = "2cpm/temperatura";
const char* humidity_topic = "2cpm/umidade";
const char* rain_topic = "2cpm/chuva";
const char* soil_moisture_topic = "2cpm/umidadesolo";

// Configurando o DHT11
#define DHTPIN 4 // Pino onde o DHT11 está conectado
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Definindo os pinos dos sensores e da bomba
const int rainSensorPin = 32;
const int soilMoisturePin = 33;
const int pumpPin = 25;

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  
  dht.begin();
  pinMode(rainSensorPin, INPUT);
  pinMode(soilMoisturePin, INPUT);
  pinMode(pumpPin, OUTPUT);
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conexão MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("conectado");
    } else {
      Serial.print("falhou, rc=");
      Serial.print(client.state());
      Serial.println("; tentaremos novamente em 5 segundos");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  float h = dht.readHumidity();
  float t = dht.readTemperature();
  int rainValue = digitalRead(rainSensorPin);
  int soilMoistureValue = analogRead(soilMoisturePin);
  
  char tempString[8];
  dtostrf(t, 1, 2, tempString);
  char humidityString[8];
  dtostrf(h, 1, 2, humidityString);
  char rainString[8];
  dtostrf(rainValue, 1, 2, rainString);
  char soilMoistureString[8];
  dtostrf(soilMoistureValue, 1, 2, soilMoistureString);

  client.publish(temp_topic, tempString);
  client.publish(humidity_topic, humidityString);
  client.publish(rain_topic, rainString);
  client.publish(soil_moisture_topic, soilMoistureString);

  if (soilMoistureValue < 500) { // Configurar conforme a necessidade
    digitalWrite(pumpPin, HIGH);
  } else {
    digitalWrite(pumpPin, LOW);
  }

  delay(2000); // Aguarda 2 segundos antes de realizar outra leitura e publicar novamente
}

